import socket
import time

import pyaudio

SIP_SERVER = "192.168.11.252"  # IP ‡∏Ç‡∏≠‡∏á SIP Server
SIP_PORT = 5060
CLIENT_IP = "192.168.11.252"  # IP ‡∏Ç‡∏≠‡∏á Client
CLIENT_PORT = 5062  # SIP Client ‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ô‡∏µ‡πâ
RTP_PORT = 4000  # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á RTP

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PyAudio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
p = pyaudio.PyAudio()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á
FORMAT = pyaudio.paInt16  # ‡πÉ‡∏ä‡πâ 16-bit PCM
CHANNELS = 1  # Mono
RATE = 8000  # Sampling rate 8kHz (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PCMU)
CHUNK = 1024  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 10ms)
WIDTH = 2  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ sample 2 byte

# ‡πÄ‡∏õ‡∏¥‡∏î Stream ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô (input stream)
input_stream = p.open(
    format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK
)

# ‡πÄ‡∏õ‡∏¥‡∏î Stream ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö output ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å RTP
output_stream = p.open(
    format=FORMAT, channels=CHANNELS, rate=RATE, output=True, frames_per_buffer=CHUNK
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á UDP socket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SIP
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((CLIENT_IP, CLIENT_PORT))

# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SIP INVITE + SDP (‡∏Å‡∏≥‡∏´‡∏ô‡∏î RTP port)
sip_invite_body = f"""v=0 
o=- 0 0 IN IP4 {CLIENT_IP}
s=VoIP Call
c=IN IP4 {CLIENT_IP}
t=0 0
m=audio {RTP_PORT} RTP/AVP 0
a=rtpmap:0 PCMU/8000
"""

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Content-Length ‡∏Ç‡∏≠‡∏á SIP message
content_length = len(sip_invite_body)

# SIP INVITE message
sip_invite = f"""INVITE sip:jeng2@{SIP_SERVER} SIP/2.0
Via: SIP/2.0/UDP {CLIENT_IP}:{CLIENT_PORT};branch=z9hG4bK776asdhds
Max-Forwards: 70
To: <sip:jeng2@{SIP_SERVER}>
From: <sip:jeng@{CLIENT_IP}>;tag=1928301774
Call-ID: 12345678@{CLIENT_IP}
CSeq: 1 INVITE
Contact: <sip:jeng@{CLIENT_IP}>
Content-Type: application/sdp
Content-Length: {content_length}

{sip_invite_body}
"""

try:
    # ‡∏™‡πà‡∏á SIP INVITE ‡πÑ‡∏õ‡∏´‡∏≤ SIP Server
    sock.sendto(sip_invite.encode(), (SIP_SERVER, SIP_PORT))
    print("üì® SIP INVITE request sent.")

    # ‡∏£‡∏±‡∏ö Response ‡∏à‡∏≤‡∏Å Server
    response, _ = sock.recvfrom(1024)
    print("üì© Response from server:")
    print(response.decode())

    # ‡πÄ‡∏õ‡∏¥‡∏î RTP socket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    rtp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    print("üéôÔ∏è Sending RTP audio packets...")

    # ‡∏£‡∏±‡∏ö RTP Audio packets ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    while True:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
        audio_data = input_stream.read(CHUNK)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á RTP packet (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RTP header)
        rtp_packet = b"\x80\x78\x00\x01" + audio_data  # RTP header + ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á

        # ‡∏™‡πà‡∏á RTP packet ‡πÑ‡∏õ‡∏ó‡∏µ‡πà SIP Server
        rtp_sock.sendto(rtp_packet, (SIP_SERVER, RTP_PORT))
        time.sleep(0.01)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏ó‡∏∏‡∏Å 10ms

        # ‡∏£‡∏±‡∏ö RTP Audio packets ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ echo ‡∏Å‡∏•‡∏±‡∏ö)
        rtp_data, _ = rtp_sock.recvfrom(1024)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á RTP packet ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        print("üîä Received RTP packet from server:")
        print(rtp_data)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• raw ‡∏Ç‡∏≠‡∏á RTP packet

        # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å RTP packet
        output_stream.write(rtp_data[4:])  # ‡∏Ç‡πâ‡∏≤‡∏° RTP header ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á

except Exception as e:
    print(f"‚ùå Error: {e}")
finally:
    # ‡∏õ‡∏¥‡∏î Stream ‡πÅ‡∏•‡∏∞ socket
    try:
        if input_stream.is_active():
            input_stream.stop_stream()
        if output_stream.is_active():
            output_stream.stop_stream()
    except OSError:
        print("Stream is not open.")
    input_stream.close()
    output_stream.close()
    p.terminate()
    sock.close()
    rtp_sock.close()
